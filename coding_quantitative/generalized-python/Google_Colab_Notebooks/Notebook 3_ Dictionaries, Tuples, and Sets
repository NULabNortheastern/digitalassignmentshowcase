{"cells":[{"cell_type":"markdown","metadata":{"id":"3f2sJmDN8TqG"},"source":["<img align=\"left\" src=\"https://ithaka-labs.s3.amazonaws.com/static-files/images/tdm/tdmdocs/CC_BY.png\"><br />\n","\n","Adapted by Sarah Connell, Dipa Desai, Juniper Johnson, Liam MacLean, Sara Morrell, and Emre Tapan from two notebooks created by [Nathan Kelber](https://nkelber.github.io/) and Ted Lawless for [JSTOR Labs](https://labs.jstor.org/) under [Creative Commons CC BY License](https://creativecommons.org/licenses/by/4.0/). See [here](https://github.com/ithaka/constellate-notebooks) for the original versions. Some exercises were adapted from teaching notebooks created by Laura Nelson, University of British Columbia, and from [Python for Everybody](https://www.py4e.com/). Warm thanks to Kate Kryder, Data Analysis & Visualization Specialist at Northeastern University, for helping to develop these notebooks.<br />\n","___"]},{"cell_type":"markdown","metadata":{"id":"UWFtTCX08TqI"},"source":["# Python Data Types"]},{"cell_type":"markdown","metadata":{"id":"PvS3iLZ_8TqI"},"source":["So far, we've seen a few of Python's inbuilt data types: integers, floats, strings, and lists. This lesson will cover three additional data types: dictionaries, tuples, and sets. These help us store many values inside of a single variable. These data types are more complex, but their unique features can be beneficial depending on what kind of data we are working with, and what we intend to do with the data."]},{"cell_type":"markdown","metadata":{"id":"W3SmeCZB8TqN"},"source":["# Dictionaries\n","\n","Like a list, a **dictionary** can hold many values within a single variable. We have seen that the items of a list are stored in a strictly-ordered fashion, starting from item 0. In a dictionary, each **value** is stored in relation to a descriptive **key** forming a **key/value pair**. This structure often makes it easier to look information up, because you can supply a key and receive a value without needing to refer to a specific index number. You are not allowed to have duplicate keys in Python dictionaries; each key can be used only once.\n","\n","Whereas a list is typed with square backets `[]`, a dictionary is typed with braces (also called curly brackets) `{}`.  The following examples show how key/value pairs can be used to store different kinds of data in a dictionary.\n","\n","`example_dictionary = {key1 : value1, key2 : value2, key3 : value3}`\n","\n","`menu_dictionary = {item1 : price1, item2 : price2, ...}`\n","\n","`gradebook_dictionary = {name1 : grade1, name2 : grade2, ...}`\n","\n","The values in dictionaries can be any data type. You can have a mix of different data types within a dictionary. The keys can be most data types, including integers, floats, and strings.\n","\n","Here is an example dictionary with the menu items from a restaurant as **keys** and their prices as **values**.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BW8UuSdj8TqN"},"outputs":[],"source":["# An example of a dictionary storing menu items and prices\n","breakfast_menu ={\n"," 'Breakfast Sandwich': 9.75,\n"," 'Croissant Breakfast Sandwich': 11.0,\n"," 'Biscuit Sandwich': 9.0,\n"," 'Spinach, Sunchoke, & Egg Plate': 11.0,\n"," 'Salmon, Avocado, and Egg Sandwich': 11.50,\n"," 'Scrambled Egg Plate': 9.75,\n"," 'Museli': 6.50,\n"," 'Hash': 14.50,\n"," 'Egg in a Hole': 12,\n"," 'Croque Madame': 13.50,\n"," 'Bread & Butter': 6.0}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IE9OsiUs8TqN"},"outputs":[],"source":["# Let's take a look at what we just created\n","print(breakfast_menu)"]},{"cell_type":"code","source":["# If you don't like the look of that, you can use this code instead\n"," # Here, we are importing a function to \"pretty print\" our data\n","from pprint import pprint\n","pprint(breakfast_menu)"],"metadata":{"id":"qU73R10cBCjb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TwqGsY0S8TqN"},"source":["We relied on order to reference the items in our tuples by their index numbers. Dictionaries are different. We use the keys to look up corresponding values, in this format:\n","`dictionary_name[key]`\n","\n","For example:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jUN28Z7P8TqN"},"outputs":[],"source":["breakfast_menu['Breakfast Sandwich']"]},{"cell_type":"markdown","metadata":{"id":"4w0SsmUb8TqO"},"source":["The key `'Breakfast Sandwich'` always maps to the value `9.75` so the order of the items doesn’t matter.\n","\n","This is very different from tuples, where changing the order of the items will also change the item that is retrieved for a particular index number.\n","\n","For example:"]},{"cell_type":"code","source":["# Re-initializing my_favorite_philosophers if this is a new session\n","my_favorite_philosophers = ('Margaret Cavendish', 'Mary Wollstonecraft', 'Hannah Arendt')"],"metadata":{"id":"kx4Jxd-Fvet1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Retrieving an item from the tuple\n","my_favorite_philosophers[0]"],"metadata":{"id":"K1xTklOzueXu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Overwriting the tuple with a different order of items\n","my_favorite_philosophers = ('Hannah Arendt', 'Mary Wollstonecraft', 'Margaret Cavendish')\n"],"metadata":{"id":"NY3JFLNyuee1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Retrieving a different item with the same index number\n","my_favorite_philosophers[0]"],"metadata":{"id":"gm5MMJKhu3Xm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Try it yourself! In the code block below, call up the values for `Museli` and for `Egg in a Hole`. Make sure to pay attention to the capitalization–remember that everything is case sensitive!"],"metadata":{"id":"lECybKqpuST0"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y6hbmy0x8TqO"},"outputs":[],"source":["# Fill in your code here\n","# What happens if you enter a key that is not in our dictionary?"]},{"cell_type":"markdown","metadata":{"id":"PO57DnbU8TqO"},"source":["We noted above that dictionaries, unlike tuples, are mutable: we can change them. For example, we might want to add a key/value pair to our dictionary, like so:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YpOW5GPE8TqO"},"outputs":[],"source":["breakfast_menu['Waffle'] = 12.00"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UHPLtHX-8TqO"},"outputs":[],"source":["# When we print breakfast_menu, we can see that it has been updated:\n","print(breakfast_menu)\n","\n","# Or, un-comment-out the line below to use the \"pretty print\" function\n","# You will need to comment out the first line, unless you want to print the dictionary twice!\n","# And, be careful about the indentation!\n","#pprint(breakfast_menu)"]},{"cell_type":"markdown","metadata":{"id":"55Ys_hYQ8TqP"},"source":["You can also change the values in a dictionary. Maybe we want to raise the price of the Scrambled Egg Plate:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4mu8uEnq8TqP"},"outputs":[],"source":["breakfast_menu['Scrambled Egg Plate'] = 20.00"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sVoJmOR48TqP"},"outputs":[],"source":["# In this code block, call up the value of the 'Scrambled Egg Plate' key to confirm our change\n"]},{"cell_type":"markdown","source":["We can use the `type()` function with dictionaries and tuples, just like we did with other data types."],"metadata":{"id":"eKt4ziELcYLE"}},{"cell_type":"code","source":["# Run this to check the type of a tuple, then check the type of breakfast_menu to check a dictionary\n","type(my_favorite_philosophers)"],"metadata":{"id":"0cUXAuOdcZxD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The `len` function works on dictionaries; it returns the number of key/value pairs:"],"metadata":{"id":"bA4ZsfX0cdPF"}},{"cell_type":"code","source":["len(breakfast_menu)"],"metadata":{"id":"gd4FxJQcckyj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The `in` operator works on dictionaries; it tells you whether something appears as a key in the dictionary (appearing as a value is not good enough)."],"metadata":{"id":"ecqUOGZ5Q-xW"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"WK-PB8Nc8TqQ"},"outputs":[],"source":["'Hash' in breakfast_menu"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y-_Scho78TqQ"},"outputs":[],"source":["9.75 in breakfast_menu"]},{"cell_type":"markdown","source":["Here is how you would check to see if a value is in a dictionary:"],"metadata":{"id":"-qZ6VMeKRMzs"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Oj9-ltt-8TqQ"},"outputs":[],"source":["9.75 in breakfast_menu.values()"]},{"cell_type":"markdown","source":["We can also use dictionaries in conditional statements. For example, the code below initializes a variable called `menu_item` and then uses an `if` statement to check whether `menu_item` is a key in the `breakfast_menu` dictionary.\n","\n","If it is, the code prints the concatenation of \"The price is $ \" and the value associated with `menu_item` (converted to a string). If `menu_item` is not a key in the `breakfast_menu` dictionary, the code prints instead \"Sorry, this is not in our menu!\"\n","\n","**Note**: This example shows a simpler approach to printing than concatenation; you just print the string and then print the value. This means that we don't need to change the data type of the value we are retrieving to concatenate it with a string. However, if the spacing bothers you, you could fix this by using concatenation instead."],"metadata":{"id":"HVgVK6KpRXgu"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"uvISw14F8TqR"},"outputs":[],"source":["# Run this, then try changing menu_item to look up a different string\n","menu_item = 'Hash'\n","if menu_item in breakfast_menu:\n","    print('The price is $',breakfast_menu[menu_item])\n","else:\n","    print('Sorry, this is not in our menu!')"]},{"cell_type":"markdown","source":["The code above might also have been written using the `input()` function to make it a bit more flexible:"],"metadata":{"id":"iG90CsCjRdpK"}},{"cell_type":"code","source":["# Using `input()` to initialize the menu_item variable\n","menu_item = input(\"What would you like for breakfast? \")\n","if menu_item in breakfast_menu:\n","    print('The price is $',breakfast_menu[menu_item])\n","else:\n","    print('Sorry, this is not in our menu!')"],"metadata":{"id":"-KjLrPXVf0I1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["It is also possible for dictionaries to contain other dictionaries. These are called **nested** dictionaries.\n","\n","For example, each of the values in `cavendish_publications` below is itself a dictionary."],"metadata":{"id":"LguI1M9XgQFo"}},{"cell_type":"code","source":["# Initialize the cavendish_publications dictionary\n","cavendish_publications = {\n","  \"observations\" : {\n","    \"title\" : \"Observations Upon Experimental Philosophy\",\n","    \"pub_date\" : 1667,\n","    \"genre\" : \"natural philosophy\"\n","  },\n","  \"william\" : {\n","    \"name\" : \"The Life of the Thrice Noble, High and Puissant Prince William Cavendishe\",\n","    \"year\" : 1666,\n","    \"genre\": \"biography\"\n","  },\n","  \"blazing\" : {\n","    \"name\" : \"The Blazing World\",\n","    \"year\" : 1666,\n","    \"genre\": \"science fiction\"\n","  }\n","}"],"metadata":{"id":"SA2mjwBGjM7P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# You can retrieve items from nested dictionaries like so\n","cavendish_publications['blazing']['genre']"],"metadata":{"id":"yUezy6yEjO0B"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Lt3nqQKL4oX4"},"source":["\n","## `for` loops and dictionaries\n","In the last tutorial, we learned how to use `for` loops to iterate a task over a list. You can also write `for` loops to iterate a task over dictionaries.\n","\n","By default, if you put a dictionary into a `for` loop, it will iterate over the keys in that dictionary. Here's an example of how that works."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o2_TS3PE4oX5"},"outputs":[],"source":["short_menu ={\n"," 'Breakfast Sandwich': 9.75,\n"," 'Croissant Breakfast Sandwich': 11.00,\n"," 'Biscuit Sandwich': 9.00}\n","\n","for key in short_menu:\n","    print(key)"]},{"cell_type":"markdown","source":["`key` is the iteration variable in the block above. Confirm this for yourself by updating the code below to use a different name for your iteration variable (make sure to change both instances!)."],"metadata":{"id":"-guHQfBW6O6j"}},{"cell_type":"code","source":["# Update this code to use a different iteration variable\n","short_menu ={\n"," 'Breakfast Sandwich': 9.75,\n"," 'Croissant Breakfast Sandwich': 11.00,\n"," 'Biscuit Sandwich': 9.00}\n","\n","for sandwich in short_menu:\n","    print(sandwich)"],"metadata":{"id":"EoW22G3g6ilj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ciaSUCtM4oX5"},"source":["We can also use the tools we learned in the last lesson to work with dictionaries. For example, we might want to retrieve values, instead of keys:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aMAcrkXr4oX6"},"outputs":[],"source":["# A program that prints the prices of menu items\n","short_menu ={\n"," 'Breakfast Sandwich': 9.75,\n"," 'Croissant Breakfast Sandwich': 11.00,\n"," 'Biscuit Sandwich': 9.00}\n","\n","for key in short_menu:\n","    print(\"Price: $\",short_menu[key])"]},{"cell_type":"markdown","metadata":{"id":"43F9Slb14oX6"},"source":["Or, pulling these together, we might want both values and keys:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5c_0Vi-u4oX6"},"outputs":[],"source":["# A program that prints the names and prices of menu items\n","short_menu ={\n"," 'Breakfast Sandwich': 9.75,\n"," 'Croissant Breakfast Sandwich': 11.00,\n"," 'Biscuit Sandwich': 9.00}\n","\n","for key in short_menu:\n","    print(\"For our \" + key + \", the price is $\" + str(short_menu[key])) # We put the `short_menu[key]` inside the `str()` to turn the float data type into a string and print the phrase\n"]},{"cell_type":"markdown","metadata":{"id":"7UFFTVXPGKv4"},"source":["# Tuples\n","\n","In our last tutorial, we used iterations to execute commands on each element within a list. We saw that lists can store integers, floats, and strings. We also saw that lists are changeable, or **mutable**. We will see as we go forward that lists and tuples look similar, but a key difference between lists and tuples is that lists are **mutable**. Tuples are not changeable after they are initialized. This can help make data stored in a tuple more secure, and makes tuples faster and more memory-efficient than lists.\n","\n","A tuple can store anywhere from zero to millions of items. The items that can be stored in a tuple include the data types we have already learned: integers, floats, and strings—and a single tuple may contain different data types. A tuple assignment statement takes the form:\n","\n","`my_tuple = (item1, item2, item3, item4)`\n","\n","with the items separated by commas and the tuple enclosed in parentheses."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Bs0TzRECGKv4"},"outputs":[],"source":["# A tuple containing integers\n","# What do you predict the output will be? Run the code to see if you are correct.\n","my_favorite_numbers = (17, 19, 100)\n","print(my_favorite_numbers)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y6-dnBHiGKv5"},"outputs":[],"source":["# A tuple containing strings\n","my_favorite_philosophers = ('Margaret Cavendish', 'Mary Wollstonecraft', 'Hannah Arendt')\n","print(my_favorite_philosophers)"]},{"cell_type":"markdown","metadata":{"id":"OZ8B0xFOGKv5"},"source":["Both `my_favorite_numbers` and `my_favorite_philosophers` have three items, but we could have also initialized them with no items `my_favorite_numbers = ()` or many more items. Each item has an index number that depends on their order. The first item is 0, the second item is 1, the third item is 2, etc. In the `my_favorite_philosophers` tuple, `'Hannah Arendt'` is item 2.\n","\n","To retrieve an item from a tuple, we put the name of the tuple, followed by the index number for the item we want to retrieve in square brackets.\n","\n","`Retrieving an item in a tuple:`\n","  \n","  &nbsp;&nbsp;&nbsp;&nbsp; `tuple name[index number]`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EwtYV6GJGKv6"},"outputs":[],"source":["# Retrieving an item in a tuple\n","# Which philosopher will this code retrieve?\n","my_favorite_philosophers[2]"]},{"cell_type":"markdown","metadata":{"id":"z-xU9GnvGKv6"},"source":["What do you think will happen if we change the index number to 1? What about 3?"]},{"cell_type":"markdown","metadata":{"id":"Hht9kuhzGKv6"},"source":["Tuples can also contain other tuples. To retrieve a value from a tuple within a tuple, we use two indexes (or indices)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j_qkZi_sGKv8"},"outputs":[],"source":["# Retrieving an item from a tuple within a tuple\n","# What do you predict the code will do?\n","my_favorite_philosophers = (('Margaret Cavendish', 'Mary Wollstonecraft', 'Hannah Arendt'),\n","                            ('Anne Conway', 'Mary Astell', 'Judith Butler'))\n","my_favorite_philosophers[0][2]"]},{"cell_type":"markdown","metadata":{"id":"1jBp6_QBGKv8"},"source":["How would you change the index above to retrieve Mary Astell? Try modifying and running the code in the empty cell below."]},{"cell_type":"code","source":["# Modify the code from the cell above to retrieve Mary Astell.\n"],"metadata":{"id":"k82ZvWIKGKv8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NJ8l5gNmGKv8"},"source":["We can retrieve a group of consecutive items from a tuple using slices instead of a single index number. We create a **slice** by indicating a starting and ending index number, separated by a colon, like so:\n","  \n","`tuple name[starting index number: ending index number]`\n","\n","The slice contains all the items between our starting and stopping index number."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J1aY-SJTGKv9"},"outputs":[],"source":["# Taking a slice of a tuple\n","historical_periods = ('Classical Antiquity',\n","                      'Early Middle Ages',\n","                      'High Middle Ages',\n","                      'Late Middle Ages',\n","                      'Early Modern Period',\n","                      'Late Modern Period',\n","                      'Contemporary History')\n","historical_periods[3:5]"]},{"cell_type":"markdown","metadata":{"id":"TpDNLSCzGKv9"},"source":["Notice that the second index in a slice is the stopping point. This can be confusing if you were expecting three items instead of two. One way to remember this is by subtracting the indexes in your head (5 - 3 = 2 items).\n","\n","It is not uncommon for tuples to be hundreds or thousands of items long.  If you want to know how many things are in a tuple (aka, its length), you can use the `len()` function."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cMCxtR7nGKv9"},"outputs":[],"source":["# Using the len() function to discover the number of items in the tuple\n","len(historical_periods)"]},{"cell_type":"markdown","source":["Another useful application of tuples is in dictionaries. Mutable data types like lists and dictionaries cannot be *keys* in dictionaries (though they can be the *values*). Because tuples are immutable, they allow more complexx dictionary keys that wouldn't be permitted as lists."],"metadata":{"id":"jEH_HEQnRtN6"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"KoGLFAXI8TqR"},"outputs":[],"source":["breakfast_menu_sizes ={\n"," ('Breakfast Sandwich', 'regular'): 9.75,\n"," ('Breakfast Sandwich', 'large'): 10.75,\n"," ('Croissant Breakfast Sandwich', 'regular'): 11.00,\n"," ('Croissant Breakfast Sandwich', 'large'): 12.00,\n"," ('Biscuit Sandwich', 'regular'): 9.00,\n"," ('Biscuit Sandwich', 'large'): 10.00,}"]},{"cell_type":"markdown","metadata":{"id":"hL7ZhT7t8TqS"},"source":["The code above initializes a dictionary that contains a set of key/value pairs. Each of the keys is a tuple, which itself contains two strings. Each of the values is a float. This kind of nesting can be confusing at first, but it gets easier if you read through the structure carefully and you remember how the different data types are expressed.\n","\n","You can use the same tools you've already learned to retrieve or modify the items in this dictionary. For example:"]},{"cell_type":"code","source":["breakfast_menu_sizes[('Breakfast Sandwich', 'regular')]"],"metadata":{"id":"8TNkaye1B7Mu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Sets\n","\n","Our focus here has been on dictionaries and tuples, but we are briefly going to discuss one more data type: **sets**. Sets are the last of the four data types in Python that can store collections of data. To recap: these are lists, dictionaries, tuples, and sets.\n","\n","Sets are expressed like so:\n","\n","`example_set = {\"item1\", \"item2\", \"item3\"}`\n","\n","Sets are **unordered** and **unindexed**. That means that the items in a set could be in a different order any time you reference them. You cannot refer to the items in a set by index numbers, as you do with tuples. You'll also note from our example that the items in a set are not keyed, as with dictionaries. Because sets are unindexed, you are not allowed to have duplicate values.\n","\n","You cannot change the items in a set once the set has been initialized. However, you can remove items or add new ones. Taking our generic example, this means that we could remove `item3` or add `item4`, but we couldn't change `item1` to `item_one`.\n","\n","Sets may contain a mix of different data types. However, sets cannot contain **mutable** data types like dictionaries or lists."],"metadata":{"id":"TwOqRclKu1rv"}},{"cell_type":"code","source":["# Initializing an example set\n","my_favorites = {\"green\", 19, \"lily of the valley\", \"blackberries\", \"cookie dough\"}"],"metadata":{"id":"CtRguQluw1we"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# We can use the `len()` function to determine the length of a set\n","len(my_favorites)"],"metadata":{"id":"xUb-W7U_w3Ej"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# And, we can use `type()` as well\n","type(my_favorites)"],"metadata":{"id":"g32ac8dr1Hzh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["To modify the contents of a set, we use some specific functions that come pre-defined in Python for this purpose. To add individual items to the set, use the `add()` function. If you want to add two sets together, use `update()`."],"metadata":{"id":"ix2pijK2k0Ms"}},{"cell_type":"code","source":["#We can use the `add()` function to add an additional item to our set\n","my_favorites.add(\"purple\")\n","print(my_favorites)"],"metadata":{"id":"uFlrhy1Qky_y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#With the `update()` function, we can add two sets together\n","my_other_favorites = {\"cats\", 62, \"wintergreen\"}\n","my_favorites.update(my_other_favorites)\n","print(my_favorites)"],"metadata":{"id":"UDLNr1cymCjr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Just like you can add data to a set, you can remove it as well. To remove individual items, use `remove()`."],"metadata":{"id":"2xuyztrYnHnT"}},{"cell_type":"code","source":["#We can use `remove()` to remove a single item from our set\n","my_favorites.remove(\"lily of the valley\")\n","print(my_favorites)"],"metadata":{"id":"I5sBO8gKnGUM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["To remove multiple items from a set, we can use the `difference_update()` function to subtract one set from another."],"metadata":{"id":"5sxoi6nMokmE"}},{"cell_type":"code","source":["no_longer_my_favorites = {\"blackberries\", 19}\n","my_favorites.difference_update(no_longer_my_favorites)\n","print(my_favorites)"],"metadata":{"id":"eye5_B0KpjNY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["One thing that makes sets useful is that they do not allow repeat items: this means that putting a lot of items into a set is an effective way of removing any duplicates."],"metadata":{"id":"1Xwjg_7u2VWP"}},{"cell_type":"code","source":["# If you do put duplicate values in a set, they will be ignored\n","my_absolute_favorites = {\"green\", 19, \"lily of the valley\", \"blackberries\", \"cookie dough\",\"green\"}\n","print(my_absolute_favorites)"],"metadata":{"id":"MDxioFT42TG_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sX355ETZ8TqS"},"source":["That's it on tuples, dictionaries, sets, and lists! In our next lesson, we'll cover how to write functions with conditional statements that can perform calculations on a certain subset of data."]},{"cell_type":"markdown","source":["# The `in` and `not in` Operators\n","\n","Once we've put a lot of data into a container like a tuple or a dictionary, it may be helpful to check whether a particular value is in that data. We can do this with the `in` and `not in` operators, which return a boolean value: **True** or **False**. The `in` and `not in` operators can be used to check whether something is in a list, tuple, set, dictionary, or even a string. Check out the examples below."],"metadata":{"id":"-xdjinZ5GKv-"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"i6TLU946GKv-"},"outputs":[],"source":["# Checking whether an item is in a tuple using the `in` operator\n","\n","# Create a tuple called `restaurants_near_northeastern`\n","restaurants_near_northeastern = ('B.GOOD',\n"," 'Starbucks',\n"," 'Dunkin Donuts' ,\n"," 'Amelias Taqueria',\n"," 'Tatte',\n"," 'Sweet Tomatoes',\n"," 'Mamacita',\n"," 'Kigo Kitchen',\n"," 'QDOBA',\n"," 'Popeyes',\n"," 'University House of Pizza',\n"," 'Boston Shawarma',\n"," 'Gyroscope',\n"," 'Our House East',\n"," 'Caffe Strega',\n"," 'Ginger Exchange',\n"," 'Pho and I',\n"," 'Panera')\n","\n","# Check whether a restaurant is in restaurants_near_northeastern\n","'Tatte' in restaurants_near_northeastern"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_7z9xNEYGKv-"},"outputs":[],"source":["# Is \"Wagamama\" in restaurants_near_northeastern?\n","# What happens if we change `in` to `not in`?\n"]},{"cell_type":"code","source":["# Checking whether an item is in a list using the `in` operator\n","\n","# Create a list this time called `restaurants_near_northeastern`\n","restaurants_near_northeastern = ['B.GOOD',\n"," 'Starbucks',\n"," 'Dunkin Donuts' ,\n"," 'Amelias Taqueria',\n"," 'Tatte',\n"," 'Sweet Tomatoes',\n"," 'Mamacita',\n"," 'Kigo Kitchen',\n"," 'QDOBA',\n"," 'Popeyes',\n"," 'University House of Pizza',\n"," 'Boston Shawarma',\n"," 'Gyroscope',\n"," 'Our House East',\n"," 'Caffe Strega',\n"," 'Ginger Exchange',\n"," 'Pho and I',\n"," 'Panera']\n","\n","# Check whether a restaurant is in restaurants_near_northeastern\n","'QDOBA' in restaurants_near_northeastern"],"metadata":{"id":"TtoQSqA3D7-2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Checking whether a string appears within another string\n","\n","# Create a string\n","Gadsby = \"Now, any author, from history's dawn, always had that most important aid to writing: — an ability to call upon any word in his dictionary in building up his story. That is, our strict laws as to word construction did not block his path. But in my story that mighty obstruction will constantly stand in my path; for many an important, common word I cannot adopt, owing to its orthography.\"\n","\n","# Check whether a letter appears within that string\n","# What happens if we change the letter \"e\" to a whole word?\n","\"e\" in Gadsby"],"metadata":{"id":"rvgTRpD6CNpP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Dictionaries are checked a little differently from other data types, because by default the `in` operator only checks the dictionary's *keys*:"],"metadata":{"id":"4lDBqfxUEvez"}},{"cell_type":"code","source":["# Checking whether certain strings are in a dictionary\n","\n","# Create a dictionary\n","breakfast_menu ={\n"," 'Breakfast Sandwich': 9.75,\n"," 'Croissant Breakfast Sandwich': 11.0,\n"," 'Biscuit Sandwich': 9.0,\n"," 'Spinach, Sunchoke, & Egg Plate': 11.0,\n"," 'Salmon, Avocado, and Egg Sandwich': 11.50,\n"," 'Scrambled Egg Plate': 9.75,\n"," 'Museli': 6.50,\n"," 'Hash': 14.50,\n"," 'Egg in a Hole': 12,\n"," 'Croque Madame': 13.50,\n"," 'Bread & Butter': 6.0}\n","\n","# Try looking for one of the keys\n","print(\"Museli on menu: \", \"Museli\" in breakfast_menu)\n","print(\"Item for $6.50: \", 6.50 in breakfast_menu)"],"metadata":{"id":"8e9C2EHnWZVH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["It's possible to check a dictionary's values instead, but you need to use `values()` to indicate that's what you're checking. Also notice that this means you're no longer checking the keys:"],"metadata":{"id":"hk_ZdMlhXwU2"}},{"cell_type":"code","source":["# Try looking for the values\n","print(\"Museli on menu: \", \"Museli\" in breakfast_menu.values())\n","print(\"Item for $6.50: \", 6.50 in breakfast_menu.values())"],"metadata":{"id":"EKuqwTf6X8VR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The `in` and `not in` operators will be useful as we build up more complex functions using loops and conditionals, in the future lessons."],"metadata":{"id":"x3j4DF9nYTxO"}},{"cell_type":"markdown","source":["# Data types reference chart\n","\n","As a quick reference, here is a table of all seven data types we have learned.\n","\n","|Familiar name | Programming name | Example |\n","|---|---|---|\n","|Whole number|integer| -7|\n","|Decimal|float | 72.5|\n","|Text|string| \"Hello world\"|\n","|Editable list|list|[value0, value1, value2, value3, ...]|\n","|Non-editable list|tuple|(value0, value1, value2, value3, ...)|\n","|Dictionary|dictionary|{key1:value1, key2:value3, ...}|\n","|Set|set|{\"item1\", \"item2\", \"item3\"}|"],"metadata":{"id":"Qgk9zuhy_pjg"}},{"cell_type":"markdown","metadata":{"id":"62AYsqZE8TqS"},"source":["# Practice Exercises"]},{"cell_type":"markdown","metadata":{"id":"w9TCyiQL8TqS"},"source":["##Exercise One"]},{"cell_type":"markdown","metadata":{"id":"jqgRsAyI8TqS"},"source":["Initialize a tuple called `data_types` that contains the following strings, in this exact order: \"integer\", \"float\", \"string\", \"list\", \"tuple\", \"dictionary\", \"set\"."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8H6GGZlT8TqS"},"outputs":[],"source":["# Initialize the class_topics tuple here"]},{"cell_type":"markdown","metadata":{"id":"56XMErM88TqT"},"source":["Now, using its index number, retrieve \"tuple\" from the `data_types` tuple."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bRzHSX008TqT"},"outputs":[],"source":["# Fill in your code here"]},{"cell_type":"markdown","metadata":{"id":"LkvCuQ4E8TqT"},"source":["Finally, take a slice that retrieves \"integer\", \"float\", \"string,\" and \"list\"."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b_2XIpgm8TqT"},"outputs":[],"source":["# Fill in your code here"]},{"cell_type":"markdown","metadata":{"id":"6lzOPgZ58TqT"},"source":["##Exercise Two"]},{"cell_type":"markdown","metadata":{"id":"HhJ4GwBS8TqT"},"source":["Initialize a dictionary called `snowfall_totals` with the following key/value pairs:\n","<br>Boston: 24.5\n","<br>Brookline: 15\n","<br>Cambridge: 14\n","<br>Framingham: 12.2\n","<br>Malden: 20\n","<br>Wakefield: 21.2\n","\n","Make sure to change the town names to strings!"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MDs00--c8TqT"},"outputs":[],"source":["# Initialize your dictionary\n","# Then, use `len` to check the length\n"]},{"cell_type":"markdown","metadata":{"id":"MtDhFtO88TqU"},"source":["Now, add a new key/value pair to your dictionary:\n","<br>Norwood: 19.5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FoiaDtId8TqU"},"outputs":[],"source":["# Add the new key/value pair for Norwood's snowfall\n","# Then use `len` to check the length\n"]},{"cell_type":"markdown","metadata":{"id":"-q8nraRQ8TqU"},"source":["This just in! Wakefield actually got 22.4 inches of snowfall. Update the value in the code block below."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CPMikJLU8TqU"},"outputs":[],"source":["# Update the value for Wakefield to 22.4\n"]},{"cell_type":"markdown","metadata":{"id":"gW0Up-TM8TqU"},"source":["Finally, call up the value of Wakefield to confirm that your change went through."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oWdCkp4Y8TqU"},"outputs":[],"source":["# Call up the value of Wakefield\n"]},{"cell_type":"markdown","metadata":{"id":"ta06uHdN8TqU"},"source":["##Exercise Three"]},{"cell_type":"markdown","metadata":{"id":"MHqpjrlo8TqU"},"source":["Below is a dictionary with information on the Boston subway system, lightly modified for convenience. Each **key** is a tuple with two strings: the line and the direction (in Boston, \"C\" can be a direction). Each **value** is a string with the last stop of that line and direction."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vP_veC8S8TqU"},"outputs":[],"source":["t_stops = {(\"orange\", \"north\"):\"Oak Grove\",\n","           (\"orange\", \"south\"):\"Forest Hills\",\n","           (\"blue\", \"north\"):\"Wonderland\",\n","           (\"blue\", \"south\"):\"Bowdoin\",\n","           (\"red\", \"north\"):\"Alewife\",\n","           (\"red\", \"southeast\"):\"Braintree\",\n","           (\"red\", \"southwest\"):\"Mattapan\",\n","           (\"green\", \"north\"):\"Lechmere\",\n","           (\"green\", \"B\"):\"Boston College\",\n","           (\"green\", \"C\"):\"Cleveland Circle\",\n","           (\"green\", \"D\"):\"Riverside\",\n","           (\"green\", \"E\"):\"Heath Street\"}"]},{"cell_type":"markdown","metadata":{"id":"hZbZRIHB8TqV"},"source":["Let's turn that data into a helpful question-answering tool. Below is some starter code which asks the user to provide the subway line and direction they are interested in. You can use that information to tell them what the last stop will be for their line.\n","\n","**Hint**: You can look above in this notebook to the program for printing prices from a menu for a model."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XX11eXdp8TqV"},"outputs":[],"source":["# This code will initialize the my_direction tuple based on user input\n","t_line = input(\"What subway line do you want to take? \")\n","t_heading = input(\"Which direction is it running? \")\n","\n","my_direction = # fill in code here\n","\n","# Fill in more code here to give an answer"]},{"cell_type":"markdown","metadata":{"id":"P2-9TTjp8TqV"},"source":["# Solutions\n","These are some sample solutions, but (as we've already noted) you might have taken a different approach."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lq6wyU5D8TqV"},"outputs":[],"source":["# Exercise One\n","# Initialize the data_types tuple\n","data_types = (\"integer\", \"float\", \"string\", \"list\", \"tuple\", \"dictionary\", \"set\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gxJOhR-x8TqV"},"outputs":[],"source":["# Exercise One\n","# Retrieve \"tuple\"\n","data_types[4]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MbkupmUX8TqV"},"outputs":[],"source":["# Exercise One\n","# Retrieve \"integer\", \"float\", \"string\", and \"list\"\n","data_types[0:4]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i4bENixZ8TqV"},"outputs":[],"source":["# Exercise Two\n","# Initialize your dictionary\n","snowfall_totals = {\"Boston\": 24.5,\n","\"Brookline\": 15,\n","\"Cambridge\": 14,\n","\"Framingham\": 12.2,\n","\"Malden\": 20,\n","\"Wakefield\": 21.2}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IFAI7cdh8TqV"},"outputs":[],"source":["# Exercise Two\n","# Check the length of the dictionary\n","len(snowfall_totals)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4vrQWiPZ8TqW"},"outputs":[],"source":["# Exercise Two\n","# Add the new key/value pair for Norwood's snowfall\n","# Then use `len` to check the length\n","snowfall_totals['Norwood'] = 19.5\n","len(snowfall_totals)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NB7edXml8TqW"},"outputs":[],"source":["# Exercise Two\n","# Update the value for Wakefield to 22.4\n","snowfall_totals['Wakefield'] = 22.4"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p4yceyvq8TqW"},"outputs":[],"source":["# Exercise Two\n","# Call up the value for Wakefield\n","snowfall_totals['Wakefield']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oMlODO6F8TqW"},"outputs":[],"source":["# Exercise Three\n","# Initialize the t_stops dictionary\n","t_stops = {(\"orange\", \"north\"):\"Oak Grove\",\n","           (\"orange\", \"south\"):\"Forest Hills\",\n","           (\"blue\", \"north\"):\"Wonderland\",\n","           (\"blue\", \"south\"):\"Bowdoin\",\n","           (\"red\", \"north\"):\"Alewife\",\n","           (\"red\", \"southeast\"):\"Braintree\",\n","           (\"red\", \"southwest\"):\"Mattapan\",\n","           (\"green\", \"north\"):\"Lechmere\",\n","           (\"green\", \"B\"):\"Boston College\",\n","           (\"green\", \"C\"):\"Cleveland Circle\",\n","           (\"green\", \"D\"):\"Riverside\",\n","           (\"green\", \"E\"):\"Heath Street\",}\n","\n","# Initialize the my_direction tuple based on user input\n","t_line = input(\"What subway line do you want to take? \")\n","my_heading = input(\"What direction is it running? \")\n","\n","my_direction = (t_line, my_heading)\n","\n","# Fill in a function that prints every tuple key from the t_stops dictionary\n","print(\"Your last stop will be:\")\n","print(t_stops[my_direction])"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":true,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"354px"},"toc_section_display":true,"toc_window_display":false},"colab":{"provenance":[{"file_id":"1l34iUt6tRDWSfeUbESqe-r9iIdx45s3Y","timestamp":1657644653937},{"file_id":"1gPqFset1UTRbkIn7E57skcPzZg5UEQiH","timestamp":1643923812448}],"toc_visible":true}},"nbformat":4,"nbformat_minor":0}