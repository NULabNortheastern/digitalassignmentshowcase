{"cells":[{"cell_type":"markdown","metadata":{"id":"Xdss6QGeIAXx"},"source":["<img align=\"left\" src=\"https://ithaka-labs.s3.amazonaws.com/static-files/images/tdm/tdmdocs/CC_BY.png\"><br />\n","\n","Adapted by Sarah Connell, Dipa Desai, Juniper Johnson, Liam MacLean, Sara Morrell, and Emre Tapan from a notebook created by [Nathan Kelber](https://nkelber.github.io/) and Ted Lawless for [JSTOR Labs](https://labs.jstor.org/) under [Creative Commons CC BY License](https://creativecommons.org/licenses/by/4.0/). See [here](https://github.com/ithaka/constellate-notebooks) for the original version. Some contents were adapted from teaching notebooks created by Laura Nelson, University of British Columbia, and from [Python for Everybody](https://www.py4e.com/). Warm thanks to Kate Kryder, Data Analysis & Visualization Specialist at Northeastern University, for helping to develop these notebooks.<br />\n","___"]},{"cell_type":"markdown","metadata":{"id":"JP2MEu7-IAX0"},"source":["### Functions review\n","\n","Recall that we have used several Python functions already, including `print()`, `input()`, and `type()`. As a reminder, functions are structured such that the function name is followed by a set of parentheses `()`. Inside the parentheses are any arguments that the functions operate on. We say that arguments are **passed** to the function when it is run.\n","\n","We learned that depending on the function (and your goals for using it), a function may accept no arguments, a single argument, or many arguments.\n","\n","When we introduced functions, we noted that there are three kinds:\n","* Native functions built into Python\n","* Functions others have written that you can import\n","* Functions you write yourself\n","\n","We have already covered importing functions into Python, and how to write your own functions. In this notebook, we will practice importing and writing functions, and then learn how to use conditional statements in functions.\n","\n","### Refresher on Libraries and Modules\n","\n","While Python comes with many functions, there are thousands more that others have written. Remember, a module is a Python file (extension \".py\") that contains the definitions for the functions written in Python. These modules can then be collected into even larger groups called packages and libraries. Depending on how many functions you need for the program you are writing, you may import a single module, a package of modules, or a whole library.\n","\n","Recall that the general form of importing a module is:\n","`import module_name`\n","\n","To access one of the functions in the module, you have to specify the name of the module and the name of the function, separated by a dot. This format is called **dot notation**."]},{"cell_type":"markdown","metadata":{"id":"sSzSOCjaIAX3"},"source":["Python has many useful modules, packages, and libraries that you can import. For example, the `math` module\n","provides most of the familiar mathematical functions. Before we can use the module, we have to import it:"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"2lSrSA80IAX4","executionInfo":{"status":"ok","timestamp":1761054498055,"user_tz":240,"elapsed":6,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"outputs":[],"source":["import math"]},{"cell_type":"markdown","metadata":{"id":"bViFPX6HIAX4"},"source":["Now that we have imported `math`, we can use it following the same notational format. For example, the `sqrt` function from the `math` module will calculate the square root of its argument:"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"TofKv5j_IAX5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054520724,"user_tz":240,"elapsed":11,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"00253ef9-123f-4ecf-fea5-4edbe55100b2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["4.0"]},"metadata":{},"execution_count":2}],"source":["math.sqrt(16)"]},{"cell_type":"markdown","source":["Another function in the `math` module is `ceil()` which rounds a number up to its nearest integer. In the code block below, test out `ceil()` with a float number of your choice."],"metadata":{"id":"gKr3dBHP8ffa"}},{"cell_type":"code","source":["# Use the `ceil()` function from the `math` module here\n"],"metadata":{"id":"lk2wBhsw8Sn-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xSYgnEj1IAX5"},"source":["You can find more about the functions in the `math` module [here](https://docs.python.org/3/library/math.html)."]},{"cell_type":"markdown","metadata":{"id":"yH26sH0YIAX5"},"source":["#### Writing functions refresher\n","\n","When we use built-in or imported functions, we are **calling** a function that has already been written. In our earlier lessons, we learned that to call our own functions, we need to define our function first with a **function definition statement** followed by a code block:\n","\n","`def my_function():` <br />\n","&nbsp; &nbsp; &nbsp; &nbsp;`do this task`\n","    \n","\n","After the function is defined, we can **call** on it whenever we need by executing the function like so:\n","\n","`my_function()`\n","\n","Below is an example function definition:"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"iaE39wetIAX6","executionInfo":{"status":"ok","timestamp":1761054527085,"user_tz":240,"elapsed":4,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"outputs":[],"source":["# Creating a simple function that prints lyrics\n","# Note that this just defines the function; we haven't run the function yet\n","# Note also that this is the obligatory Monty Python reference for our Python tutorial\n","def print_lyrics():\n","    print(\"I'm a lumberjack, and I'm okay.\")\n","    print('I sleep all night and I work all day.')"]},{"cell_type":"markdown","metadata":{"id":"q0c6bopsIAX6"},"source":["Recall that `def` is a Python keyword that indicates that this is a function definition. The name of the function is `print_lyrics`. The rules for function names are the same as for variable names: letters, numbers and some punctuation marks are legal, but the first character can't be a number. You can't use a keyword as the name of a function, and you should avoid having a variable and a function with the same name.\n","\n","In this example, the empty parentheses after the name indicate that this function doesn't take any arguments. Later we will build functions that take arguments as their inputs.\n","\n","The first line of the function definition is called the **header**; the rest is called the **body**. The header has to end with a colon and the body has to be indented. The body can contain any number of statements. So far we have only looked at functions with one or a couple of statements in the function body. We will take a look at how to write functions with multiple statements later in this workshop."]},{"cell_type":"markdown","metadata":{"id":"UMb8Q9IdIAX7"},"source":["Once you have defined a function, you can use it inside another function. For example, to repeat the previous refrain, we could write a function called `repeat_lyrics`:"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"uuJiJ23kIAX7","executionInfo":{"status":"ok","timestamp":1761054530379,"user_tz":240,"elapsed":36,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"outputs":[],"source":["# Defining a function that uses our `print_lyrics()` function\n","def repeat_lyrics():\n","    print_lyrics()\n","    print_lyrics()"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"cjzE1TqfIAX7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054531233,"user_tz":240,"elapsed":9,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"a655b6fd-1f34-40a5-cbc7-cd8046989565"},"outputs":[{"output_type":"stream","name":"stdout","text":["I'm a lumberjack, and I'm okay.\n","I sleep all night and I work all day.\n","I'm a lumberjack, and I'm okay.\n","I sleep all night and I work all day.\n"]}],"source":["# Running the `repeat_lyrics` function\n","repeat_lyrics()"]},{"cell_type":"markdown","metadata":{"id":"p8Go5sqiIAX8"},"source":["#### Parameters and arguments refresher\n","As we have already seen, some functions require arguments.\n","\n","When we write a function definition, we can define a **parameter** to work with the function. We use the word \"parameter\" to describe the variable in parentheses within a function definition:\n","\n","`def my_function(input_variable):` <br />\n","&nbsp; &nbsp; &nbsp; &nbsp;`do this task`\n","\n","In the pseudo-code above, `input_variable` is a parameter because it is being used within the context of a function *definition*. When we run our function, the actual variable or value we pass to the function is called an **argument**.\n","\n","You might see people using the terms \"parameter\" and \"argument\" interchangeably, but there is a distinction. A **parameter** is the variable used within the function definition, and an **argument** is the value or variable that is sent to the function when it is actually run.\n","\n","Here is an example of a user-defined function that takes an argument:"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"rY-hHlz5IAX8","executionInfo":{"status":"ok","timestamp":1761054534169,"user_tz":240,"elapsed":2,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"outputs":[],"source":["def phrase_length(p):   # In this function definition, the variable p is the parameter\n","    print(\"Phrase:\",p)\n","    print(\"Length:\",len(p))"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"t6mu7TToIAX8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054535917,"user_tz":240,"elapsed":4,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"40ff32fd-206e-4495-9b35-b610b6b3b943"},"outputs":[{"output_type":"stream","name":"stdout","text":["Phrase: I am a phrase\n","Length: 13\n"]}],"source":["phrase_length('I am a phrase') #Running the function passes the variable p to the function as an argument"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"GRzhkuheIAX8","executionInfo":{"status":"ok","timestamp":1761054538564,"user_tz":240,"elapsed":2,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"outputs":[],"source":["# In this block, try running our new function on a few different strings\n","# Uncomment the line and fill in a string phrase to input where the variable p is\n","# Run the code cell\n","\n","#phrase_length(p)"]},{"cell_type":"markdown","metadata":{"id":"M2t-PF0bIAX9"},"source":["This function assigns the argument to a parameter named `p`. The function will work with any value or variable that can be an argument for the `len()` function.\n","\n","For example, we could also first create a variable called `my_string` and then calculate its length with our new function."]},{"cell_type":"code","execution_count":9,"metadata":{"id":"JR2rHJNHIAX9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054541210,"user_tz":240,"elapsed":13,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"011503b6-a0c4-4ca6-ccab-48142948747b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Phrase: I am a string!\n","Length: 14\n"]}],"source":["my_string = \"I am a string!\"\n","phrase_length(my_string)"]},{"cell_type":"markdown","metadata":{"id":"BsB5p7zYIAX9"},"source":["In the example above, we chose `p` for the name of the parameter and `phrase_length` for the name of the function, but that was a choice that we made. This code would do the same thing but the poor naming choices make it hard to understand what the code function does."]},{"cell_type":"code","execution_count":10,"metadata":{"id":"znSDsRcFIAX9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054543174,"user_tz":240,"elapsed":7,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"c4122091-e137-4c05-d210-08f79b9e1bd1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Phrase: I am a phrase\n","Length: 13\n"]}],"source":["def bicycle_awesomeness(bicycle):   # Remember that function and variable naming should be intuitive. Here the variable bicycle stands in for variable p\n","    print(\"Phrase:\",bicycle)       # We are asking Python to print the word 'Phrase', colon sign, and then the parameter bicycle\n","    print(\"Length:\",len(bicycle))  # We are asking Python to print the word 'Length', colon sign, and then the length of, or number of characters in, the input parameter\n","bicycle_awesomeness('I am a phrase') # We specify the function argument is the string text 'I am a phrase' and run the function"]},{"cell_type":"markdown","metadata":{"id":"-srxrJzSIAX-"},"source":["Just remember to use good judgment and think about how your future self, as well as others, will need to interact with your code when you are naming things."]},{"cell_type":"markdown","source":["###Generalized Functions\n","\n","We will now cover generalized functions. Generalized functions let you execute the same process but with varying inputs and outputs. Understanding local and global variables and function return statements will enable us to write generalized functions."],"metadata":{"id":"HNwMJfzST_0W"}},{"cell_type":"markdown","metadata":{"id":"jz5okdiKIAX-"},"source":["#### Local and Global Variables\n","\n","We have seen that functions make maintaining code easier by avoiding duplication. One of the most dangerous areas for duplication is variable names. As programming projects become larger, the possibility that a variable will be re-used goes up. This can cause errors in our programs that are hard to track down. We can alleviate the problem of duplicate variable names through the concepts of **local scope** and **global scope.**\n","\n","We use the phrase \"local scope\" to describe what happens within a function. The local scope of a function may contain **local variables**, but once that function has completed, the local variables and their contents are erased.\n","\n","On the other hand, we can also create **global variables** that persist at the top-level of the program *and* within the local scope of a function.\n","\n","**To reiterate:** global variables are those created outside of functions; they can be used both within functions and outside of them. Local variables exist only within the context of their functions."]},{"cell_type":"markdown","metadata":{"id":"StruIqnSIAX-"},"source":["In fact, you're already familiar with global variables, because you've been using them throughout these lessons.\n","\n","That is, as you've already seen, when we initialize a variable within a code cell, we can use that variable in any code block within the notebook. For example, we defined the value of `my_string` several cells up, but we can still print it below."]},{"cell_type":"code","execution_count":11,"metadata":{"id":"6_zbD-ioIAX-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054546467,"user_tz":240,"elapsed":3,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"852204fd-4115-445f-892c-7926fc6aed4e"},"outputs":[{"output_type":"stream","name":"stdout","text":["I am a string!\n"]}],"source":["print(my_string)"]},{"cell_type":"markdown","metadata":{"id":"3CiC6ohZIAX_"},"source":["However, the same is not true for the variables we use within our function definitions. For example, here is a little function that prints out how the user's day has been."]},{"cell_type":"code","execution_count":12,"metadata":{"id":"HmCkdaEgIAX_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054548328,"user_tz":240,"elapsed":24,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"09b8a7f3-fd22-42a7-ed86-85a94349f331"},"outputs":[{"output_type":"stream","name":"stdout","text":["My day has been fun\n"]}],"source":["def my_day():\n","  day = \"fun\"\n","  print(\"My day has been \" + day)\n","\n","my_day()"]},{"cell_type":"markdown","metadata":{"id":"oV0mZStaIAX_"},"source":["But, what happens when we try to use `day` outside of the function?"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"QLC09ZFuIAX_","colab":{"base_uri":"https://localhost:8080/","height":141},"executionInfo":{"status":"error","timestamp":1761054550255,"user_tz":240,"elapsed":31,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"78f8034e-3e0f-4bbd-fc11-2b20a60f7f35"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'day' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-233304178.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mday\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'day' is not defined"]}],"source":["print(day)"]},{"cell_type":"markdown","metadata":{"id":"JxtX9XT9IAYA"},"source":["It's possible to use the same variable name for both local and global scopes—this is why you need to be very careful when you are naming your variables!\n","\n","For example, we can create a global variable called `day` and assign it a value of \"busy\"."]},{"cell_type":"code","execution_count":14,"metadata":{"id":"UMo9GfgxIAYA","executionInfo":{"status":"ok","timestamp":1761054552051,"user_tz":240,"elapsed":2,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"outputs":[],"source":["day = \"busy\""]},{"cell_type":"markdown","metadata":{"id":"_Y65dHGhIAYA"},"source":["Now that we've initialized this global variable, we can use it in our code. What do you think the outcome will be when you run the code block below?"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"5fpFgg89IAYA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054553245,"user_tz":240,"elapsed":3,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"fd9c0cad-531d-4289-c6c3-ec841695893f"},"outputs":[{"output_type":"stream","name":"stdout","text":["My day has been busy\n"]}],"source":["print(\"My day has been\", day)"]},{"cell_type":"markdown","metadata":{"id":"TDlti4crIAYB"},"source":["Creating this global variable, however, doesn't change the local variable within our function.\n","\n","What do you think the outcome will be when you run the code block below? Scroll up to the function definition to as a reminder of how `day` is defined within the `my_day()` function."]},{"cell_type":"code","execution_count":16,"metadata":{"id":"H4J0Gs8sIAYB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054554870,"user_tz":240,"elapsed":4,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"f505d34b-e023-4dad-96a0-edf345a73706"},"outputs":[{"output_type":"stream","name":"stdout","text":["My day has been fun\n"]}],"source":["my_day()"]},{"cell_type":"markdown","metadata":{"id":"fcN9o-ZdIAYB"},"source":["This might seem a bit confusing: the important thing to take home here is that variables you create outside of functions will be **global** and will have the same values throughout your notebook. Variables created inside of functions are **local** and cannot be used outside of those functions. It is possible to make a local variable into a global one, but that is out of scope for this lesson."]},{"cell_type":"markdown","metadata":{"id":"sz1Eg5WfIAYB"},"source":["#### Function Return Values\n","\n","Whether or not a function takes an argument, it will return a value. If we do not specify that return value in our function definition, it is automatically set to `None`, a special value that simply means null or nothing. `None` is not the same thing as the integer `0`.\n","\n","We've already seen that some functions will return values that you can do things with, while others might perform some kind of an action but do not produce any result that you can use in other code. For example, the `print()` function just prints its argument. Let's see what happens if we try to initialize a variable as the output of the `print()` function:\n"]},{"cell_type":"code","source":["# Initializing a variable by assigning its value to the output from the `print()` function\n","a_variable = print(\"Some string\")"],"metadata":{"id":"Fb5upOltDL8D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054557748,"user_tz":240,"elapsed":5,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"117a28bd-9dd8-4f22-e1a1-f0e1a067f96a"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Some string\n"]}]},{"cell_type":"code","source":["# See what happens when we try to print the new variable\n","print(a_variable)"],"metadata":{"id":"O6hhqBEHDVac","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054559835,"user_tz":240,"elapsed":4,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"c9310190-4230-479e-d861-de3186218b07"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["None\n"]}]},{"cell_type":"markdown","source":["To return a result from a function, we use what's called a `return` statement in our function definition.\n","\n","For example, we could make a very simple function called `add_two` that adds two numbers together and returns a result:"],"metadata":{"id":"lMLuTPBGDnSw"}},{"cell_type":"code","execution_count":19,"metadata":{"id":"um2GTNgiIAYB","executionInfo":{"status":"ok","timestamp":1761054563777,"user_tz":240,"elapsed":4,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"outputs":[],"source":["# A function for adding two numbers\n","def add_two(a, b):\n","    added = a + b\n","    return added"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"ox4AdaL_IAYB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054564780,"user_tz":240,"elapsed":18,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"b7dde2f4-0ad0-43d0-837d-4bcd27d8df94"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{},"execution_count":20}],"source":["# Using our new function\n","add_two(2,7)"]},{"cell_type":"markdown","metadata":{"id":"cpAkDbJHIAYB"},"source":["Note that this function as defined expects two arguments. What do you think will happen if we have only one argument? What about three arguments? Test this out in the code block below:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qp1QIVS_IAYB"},"outputs":[],"source":["# Try using our add_two function with one or three arguments\n"]},{"cell_type":"markdown","source":["Contrast the result from running `add_two()` with what we just saw with `print()`:"],"metadata":{"id":"j79rD47VYNBE"}},{"cell_type":"code","source":["# Let's try initializing a variable by assigning its value to the output from the `add_two()` function\n","added_variable = add_two(2,7)"],"metadata":{"id":"G0--k7i-X4IZ","executionInfo":{"status":"ok","timestamp":1761054568244,"user_tz":240,"elapsed":1,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# See what happens when we try to print the new variable\n","print(added_variable)"],"metadata":{"id":"lN0uTi6QYBUS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054580963,"user_tz":240,"elapsed":17,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"c7965697-61b3-4108-d8c1-a1becffdd883"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["9\n"]}]},{"cell_type":"markdown","metadata":{"id":"Qqk9tCN7IAYC"},"source":["Make note of how `return` is being used in the `update_breakfast_menu` generalized function below, so you can get a better sense of what it does and how it can be applied in writing function definitions."]},{"cell_type":"markdown","source":["#### Writing a generalized function to modify a data container\n","\n","You may want to use a function multiple times to change a data container like a dictionary. You can write a generalized function, a function that written to accept different inputs.\n","\n","Recall that in the last tutorial, we learned that writing a function first requires us to define a function name. Then, we write the code block of the task that we want the function to execute.\n","\n","You may want a generalized function to add new key/value pairs to an existing dictionary. For example, let's add a new menu item to the `breakfast_menu`. In the code block below, we will define a function called `update_breakfast_menu` to add Pancakes that cost $11 to our original `breakfast_menu` and use the return function to `return` the updated menu."],"metadata":{"id":"cSXrZcSkqj7j"}},{"cell_type":"code","source":["breakfast_menu = {'Breakfast Sandwich': 9.75,\n"," 'Croissant Breakfast Sandwich': 11.0,\n"," 'Biscuit Sandwich': 9.0}"],"metadata":{"id":"0ZhZej-HWiRX","executionInfo":{"status":"ok","timestamp":1761054583113,"user_tz":240,"elapsed":4,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["#Writing a generalized function to add key/value pairs to a dictionary\n","def update_breakfast_menu (key, value):   #Define the function name and inputs\n","  breakfast_menu[key] = value  #Set the function to add the input key/value pair to the breakfast_menu\n","  result = breakfast_menu\n","  return result    #Set the function to return the updated breakfast_menu\n","\n","update_breakfast_menu('Pancakes', 11)    #Run the function to add Pancakes that cost $11 to the breakfast_menu\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3GTbzAkxQmtS","executionInfo":{"status":"ok","timestamp":1761054583735,"user_tz":240,"elapsed":12,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"98d00fc9-0443-424d-977d-31ed51bc28ab"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Breakfast Sandwich': 9.75,\n"," 'Croissant Breakfast Sandwich': 11.0,\n"," 'Biscuit Sandwich': 9.0,\n"," 'Pancakes': 11}"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["The variable `result` defined inside the `update_breakfast_menu` function is an example of a local variable that exists only in the context of the function."],"metadata":{"id":"fjyc0hplYIwS"}},{"cell_type":"markdown","source":["In the `update_breakfast_menu()` function, you specify the key/value pair you want to add to the original `breakfast_menu` dictionary.  You can re-run this function with different key/value pairs to add multiple new menu items and prices.\n","\n","Generalized functions can also be written to modify the values in a dictionary. For example, let's say the cost of avocados has gone up, and you need to double the price of the  Salmon, Avocado, and Egg sandwich in the `breakfast_menu`.\n","\n","In the following generalized function, you specify the function inputs, telling the function to multiply the value of a specific key/value pair in the dictionary. You can re-use this function to change the costs of different key/value pairs by changing the function inputs."],"metadata":{"id":"Uey4GFAYTlvV"}},{"cell_type":"code","source":["#Writing a generalized function to change a value in a dictionary\n","def double_price(key, value, multiplier):   #Define the function name and inputs\n","  breakfast_menu[key]= value * multiplier  #Set the function to multiply the value of the input key/value pair by the multiplier\n","  result = breakfast_menu\n","  return result    #Set the function to return the updated breakfast_menu\n","\n","double_price('Salmon, Avocado, and Egg Sandwich', 11.5, 2)    #Run the function with specified inputs to double the price of the Salmon, Avocado, and Egg Sandwich"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qmCftZoKVbzh","executionInfo":{"status":"ok","timestamp":1761054585814,"user_tz":240,"elapsed":6,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"ca4b889b-997b-4f9d-dbd9-60c819b1bf57"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Breakfast Sandwich': 9.75,\n"," 'Croissant Breakfast Sandwich': 11.0,\n"," 'Biscuit Sandwich': 9.0,\n"," 'Pancakes': 11,\n"," 'Salmon, Avocado, and Egg Sandwich': 23.0}"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"wm6pdv32GBl_"},"source":["# Conditional execution\n","When you're writing code, it's often useful to have different outcomes based on different inputs and contexts. This is actually true a lot of the time! For example, if you were trying to get to the Boston Northeastern campus, you would proceed differently depending on your starting location, how much traffic there is, whether there are delays on any T lines, whether you have a Charlie card, if you have access to a bicycle, and so on. It's exactly the same with code: much of the time, you will want to say, \"if **this** thing is true, then run **this** code, but if **that** thing is true, then run **that** code.\"\n","\n","In the context of coding, we talk about **conditional execution**, which is code that only executes when certain conditions are met.\n"]},{"cell_type":"markdown","metadata":{"id":"M--7AY1IGBmA"},"source":["### Boolean Values, Boolean Expressions, and Logical Operators\n","\n","We'll show you how to write such **conditional statements** in this lesson,  but first, let's start with a few concepts that will be useful in conditional execution: Boolean values, Boolean expressions, logical operators, and `in` statements."]},{"cell_type":"markdown","metadata":{"id":"KkY796j3GBmB"},"source":["Let's start with Boolean values. **Boolean values** are one of Python's built-in data types, like floats, integers, and strings. They are used to represent the truth-value of expressions, essentially to say whether something is true or not.\n","\n","There are only two possible values for a Python Boolean: True or False. As we've already seen, Python is case-sensitive, so pay attention to the capitalization here!\n","\n","You can assign Boolean values to variables, as in the below:"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"gQuXxtpxGBmB","executionInfo":{"status":"ok","timestamp":1761054588313,"user_tz":240,"elapsed":38,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}}},"outputs":[],"source":["python_is_fun = True"]},{"cell_type":"markdown","metadata":{"id":"gM5IPTAdGBmC"},"source":["With the code above, we've set the value of the `python_is_fun` variable to \"True.\" We can confirm this with the `print()` function:"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"Vdv8A4KpGBmC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054589302,"user_tz":240,"elapsed":6,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"2e7cbedc-e602-4a14-9e67-a71b53b480af"},"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}],"source":["print(python_is_fun)"]},{"cell_type":"markdown","metadata":{"id":"oRwAhtnxGBmD"},"source":["As we've already learned, there are some words that are not allowed for variable names, and those include \"True\" and \"False.\" See what happens when you try to run the code below:"]},{"cell_type":"code","execution_count":28,"metadata":{"id":"vWmXixM9GBmE","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"error","timestamp":1761054590708,"user_tz":240,"elapsed":4,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"929c2c27-733f-469f-b601-fc6642ae3cb9"},"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"cannot assign to True (ipython-input-663037618.py, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-663037618.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    True = 'beauty'\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m cannot assign to True\n"]}],"source":["True = 'beauty'"]},{"cell_type":"markdown","metadata":{"id":"wWq_dWS3GBmE"},"source":["Now, let's take a look at **Boolean expressions**. A **boolean expression** is an expression that is either true or false.\n","\n","The following examples use the **operator** ```==```, which compares two **operands** (the things that operators act upon) and produces `True` if they are equal and `False` otherwise.\n","\n","Make sure not to confuse this with the assignment operator, which uses a single equal sign: ```=```"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"7hkmxiwhGBmF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054592246,"user_tz":240,"elapsed":9,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"1e502337-b017-4a17-f4f8-28e6e6c9e07b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":29}],"source":["# Comparing two values with the equality comparison operator ==\n","5.5==5.5"]},{"cell_type":"markdown","metadata":{"id":"fHqq7ll1GBmF"},"source":["We've actually seen this operator already, when we used ```==``` in the first lesson to compare different data types:"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"Eew1ie5_GBmF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054593483,"user_tz":240,"elapsed":5,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"9ecae062-f4c2-4909-8745-6bf77dba32aa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":30}],"source":["5.5==\"5.5\""]},{"cell_type":"markdown","metadata":{"id":"uI5skkktGBmG"},"source":["Let's practice writing a few boolean expressions:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4Mo-jvuoGBmG"},"outputs":[],"source":["# Compare two integers that have different values"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"MSWMI4jhGBmG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054595246,"user_tz":240,"elapsed":11,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"92c12f3a-9d70-4520-fe1f-7894d2a9bfcf"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":31}],"source":["# Now compare an integer and a float\n","3 == 3.0"]},{"cell_type":"markdown","metadata":{"id":"4Oj2k8BsGBmH"},"source":["There are some additional [comparison operators](https://www.w3schools.com/python/gloss_python_comparison_operators.asp):\n","\n","|Operator|Meaning|\n","|---|---|\n","|==|Equal to|\n","|!=|Not equal to|\n","|<|Less than|\n","|>|Greater than|\n","|<=|Less than or equal to|\n","|>=|Greater than or equal to|"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"owP3h9umGBmH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054597244,"user_tz":240,"elapsed":6,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"3410bae7-9c8a-48a9-f833-6be4c1af1c05"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":32}],"source":["# Try using a few of these operators\n","not 1 < 4"]},{"cell_type":"markdown","metadata":{"id":"_5DOOdKCGBmH"},"source":["We can also use comparison operators with variables:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wK8br46nGBmI"},"outputs":[],"source":["# Create a variable number_of_dogs and assign it the value of zero\n","\n","\n","# Check whether number_of_dogs is greater than or equal to 1\n"]},{"cell_type":"markdown","metadata":{"id":"XJrBoo7AGBmI"},"source":["In Python, there are three **logical operators**: ```and```, ```or```, and ```not```. The semantics of these operators is similar to their meaning in English. For example,\n","\n","```x > 0 and x < 10```\n","\n","is true only if x is greater than 0 and less than 10.\n","\n","However\n","\n","```x > 0 or x < 10``` is true if ***either*** of the conditions is true. So, this would be true as long as x is greater than zero or less than 10.\n","\n","Finally, the ```not``` operator negates a boolean expression, so ```not (x > y)``` is true if x > y is false; that is, if x is less than or equal to y."]},{"cell_type":"code","execution_count":33,"metadata":{"id":"D_PHbyy6GBmI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054601061,"user_tz":240,"elapsed":11,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"949636cf-205b-458a-947f-b758a3a0e36d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":33}],"source":["# What do you think the evaluation will be here?\n","2==3 and 3>1"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"v0JYyl85GBmI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054601686,"user_tz":240,"elapsed":5,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"7d5450c3-5026-4193-a336-9c83acfe6e44"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":34}],"source":["# What will the evaluation be here?\n","2==3 or 3>1"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"OWCz16ahGBmI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054602353,"user_tz":240,"elapsed":6,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"f541986d-6dc1-47af-88f7-4fe6caef5095"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":35}],"source":["# What about here?\n","# What could you change the value of x to so that the evaluation is 'False'\n","x = 10\n","x < 1 or x != 10"]},{"cell_type":"markdown","metadata":{"id":"nXmWdvGGGBmM"},"source":["One more useful operator is `in`. The `in` operator is another operator that will return a boolean result of either `true` or `false`. It asks whether one string is in another. We will also use the `in` operator on other data types later on.  "]},{"cell_type":"code","execution_count":36,"metadata":{"id":"hCGFOg0pGBmN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054604317,"user_tz":240,"elapsed":12,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"9284e088-0d5a-4516-916f-f82c24f0675b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":36}],"source":["greeting = \"Hello World!\"\n","'h' in greeting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8QOXh9nDGBmN"},"outputs":[],"source":["# Try this out yourself. What happens if you use a lowercase h instead?"]},{"cell_type":"markdown","metadata":{"id":"jAtD1KccGBmN"},"source":["### Writing Conditional Statements\n","\n","In order to write useful programs, we often need the ability to check conditions and change the behavior of the program accordingly. Conditional statements give us this ability. The simplest form is the `if` statement:"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"6ZMSNQbMGBmN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054606902,"user_tz":240,"elapsed":6,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"987c27ea-5d85-4467-9544-113a9ba6845c"},"outputs":[{"output_type":"stream","name":"stdout","text":["x is positive\n"]}],"source":["# What do you think would happen if you changed x to a negative number? Give this a try!\n","x = 3\n","if x > 0 :\n","    print('x is positive')"]},{"cell_type":"markdown","metadata":{"id":"a3xtSFUzGBmN"},"source":["If the condition is true, then the indented statement gets executed. If the condition is false, the indented statement is skipped."]},{"cell_type":"markdown","metadata":{"id":"DGJpGj6sGBmO"},"source":["### Structuring conditional statements\n","\n","Conditional statements consist of a **header** that ends with the colon character (```:```) followed by an indented block, called the **body**.\n","\n","There is no limit on the number of statements that can appear in the body, but there must be at least one.\n","\n","Code blocks can contain other blocks forming a hierarchical structure. In such a case, the second block is indented an additional degree. Any given block ends when the number of indentations in the current line is less than the number that started the block.\n","\n","Since the level of indentation describes which code block will be executed, improper indentations will make your code fail. When using indentations to create code blocks, look carefully to make sure you are working in the code block you intend. Each indentation for a code block is created by pressing the tab key."]},{"cell_type":"markdown","metadata":{"id":"Kynl9i1PGBmO"},"source":["## Types of Conditional Statements\n","\n","We will be focusing on `if` statements, but there are other kinds of conditional statements available in Python, and we will briefly introduce two others: `else` and `elif`.\n","\n","|Statement|Means|Condition for execution|\n","|---|---|---|\n","|`if`|if|if the condition is fulfilled|\n","|`elif`|else if|if no previous conditions were met *and* this condition is met|\n","|`else`|else|if no condition is met (no condition is supplied for an `else` statement)|\n","\n","Let's take a look at each of these."]},{"cell_type":"markdown","metadata":{"id":"IoIANn3JGBmO"},"source":["### `if` Statements\n","\n","An `if` statement begins with an expression that evaluates to **True** or **False**.\n","\n","* if **True**, then perform this action\n","* if **False**, skip over this action\n","\n","In practice, the form looks like this:\n","\n","`if this is True:` <br />\n","&nbsp; &nbsp; &nbsp; &nbsp; `perform this action`\n","\n","Let's put an `if` statement into practice with a very simple program that asks the user how their day is going and then responds.\n","\n","Our program will use a single `if` statement. If the user types \"Yes\" or \"yes\", then our program will send a response."]},{"cell_type":"code","execution_count":38,"metadata":{"id":"aQvb7XJGGBmO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054616758,"user_tz":240,"elapsed":3060,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"330a2a95-5108-42db-9129-8823028ddf34"},"outputs":[{"output_type":"stream","name":"stdout","text":["Are you having a good day? Yes\n","Glad to hear your day is going well!\n"]}],"source":["# A program that responds to a user having a good day\n","having_good_day = input('Are you having a good day? ') # Define a variable having_good_day to hold the user's input in a string\n","\n","if having_good_day == 'Yes' or having_good_day == 'yes':  # If the user has input the string 'Yes' or 'yes'\n","    print('Glad to hear your day is going well!') # Print: Glad to hear your day is going well!"]},{"cell_type":"markdown","metadata":{"id":"RnpTpCm2GBmP"},"source":["Our program works fairly well so long as the user inputs 'Yes' or 'yes'. If they type 'no' or 'sort of' or something else, it simply ends. If we want to have our program respond no matter what input it receives, we can use an `else` statement."]},{"cell_type":"markdown","metadata":{"id":"qRylcf0wGBmP"},"source":["### `else` Statements\n","\n","An `else` statement *does not require a condition* to evaluate to **True** or **False**. It simply executes when none of the previous conditions are met. The form looks like this:\n","\n","`else:` <br />\n","&nbsp; &nbsp; &nbsp; &nbsp; `perform this action`\n"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"tWANO8YUGBmP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054622732,"user_tz":240,"elapsed":2398,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"071cf257-eaca-42a7-aaa2-70625c17ced8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Are you having a good day? No\n","Maybe tomorrow will be a good day!\n"]}],"source":["# A program that responds to whether the user is having a good or bad day\n","having_good_day = input('Are you having a good day? ') # Define a variable having_good_day to hold the user's input\n","\n","if having_good_day == 'Yes' or having_good_day == 'yes':\n","    print('Glad to hear your day is going well!')\n","else:\n","    print('Maybe tomorrow will be a good day!')"]},{"cell_type":"markdown","metadata":{"id":"s6vHBOLTGBmP"},"source":["Our new program is more robust because the `else` statement gives the user a response if they do not respond \"Yes\" or \"yes\". However, that response is not very precise. The user will get the same response whether they type \"no\" or \"potato\".\n","\n","What if we wanted to add a specific option for when a user says \"No\"? Or for when a user inputs something besides \"Yes\" or \"No\"? We could use a series of `elif` statements."]},{"cell_type":"markdown","metadata":{"id":"wECykKPtGBmQ"},"source":["### `elif` Statements\n","\n","An `elif` statement, short for \"else if,\" allows us to create a list of possible conditions where one (and only one) action will be executed. `elif` statements come after an initial `if` statement and before an `else` statement:\n","\n","`if condition A is True:` <br />\n","&nbsp; &nbsp; &nbsp; &nbsp; `perform action A` <br />\n","`elif condition B is True:` <br />\n","&nbsp; &nbsp; &nbsp; &nbsp; `perform action B` <br />\n","`elif condition C is True:` <br />\n","&nbsp; &nbsp; &nbsp; &nbsp; `perform action C` <br />\n","`elif condition D is True:` <br />\n","&nbsp; &nbsp; &nbsp; &nbsp; `perform action D` <br />\n","`else:` <br />\n","&nbsp; &nbsp; &nbsp; &nbsp;`perform action E`\n","\n","There is no limit on the number of `elif` statements. If there is an `else` clause, it has to be at the end, but there doesn’t have to be one.\n","\n","For example, we could add an `elif` statement to our program so it responds to both \"Yes\" and \"No\" with unique answers. We could then add an `else` statement that responds to any user input that is not \"Yes\" or \"No\"."]},{"cell_type":"code","execution_count":40,"metadata":{"id":"n_9m4jxcGBmQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054628507,"user_tz":240,"elapsed":2470,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"4839b1d0-60ce-475b-d10e-da0f3eb75d93"},"outputs":[{"output_type":"stream","name":"stdout","text":["Are you having a good day? yes\n","Glad to hear your day is going well!\n"]}],"source":["# A program that responds to whether the user is having a good or bad day\n","having_good_day = input('Are you having a good day? ') # Define a variable having_good_day to hold the user's input\n","\n","# If the user has input the string 'Yes' or 'yes'\n","if having_good_day == 'Yes' or having_good_day == 'yes':\n","    print('Glad to hear your day is going well!')\n","\n","# An elif statement for \"no\" and \"No\" responses\n","elif having_good_day == 'No' or having_good_day == 'no':\n","    print(\"That's too bad! Maybe tomorrow will be better.\") # Note that we can use a single quote in our string because it begins and ends with double quotes\n","\n","# An else statement that catches if the answer is not 'yes' or 'no'\n","else: # Execute this if none of the other branches executes\n","    print('Sorry, I only understand \"Yes\" or \"No\"') # Note that we can use double quotes in our string because it begins and ends with single quotes"]},{"cell_type":"markdown","metadata":{"id":"cJMfIMgDGBmQ"},"source":["#### The difference between `elif` and `if`\n","\n","As soon as an `elif` condition is met, all the other `elif` statements below are skipped over. This means that one (and only one) conditional statement is executed when using `elif` statements. The fact that only one `elif` statement is executed is important because it may be possible for multiple conditional statements to evaluate to **True**. A series of `elif` statements evaluates from top-to-bottom, only executing the first `elif` statement whose condition evaluates to **True**. The rest of the `elif` statements are skipped over (whether they are **True** or **False**).\n","\n","In practice, a set of mutually exclusive `if` statements will result in the same actions as an `if` statement followed by `elif` statements. There are a few good reasons, however, to use `elif` statements:\n","\n","1. A series of `elif` statements helps someone reading your code understand that a single choice is being made.\n","2. Using `elif` statements will make your program run faster since other conditional statements are skipped after the first evaluates to **True**. Otherwise, every `if` statement has to be evaluated before the program moves to the next step.\n","3. Writing a mutually exclusive set of `if` statements can be very complex.\n"]},{"cell_type":"markdown","metadata":{"id":"fIGz6nnOGBmQ"},"source":["# Practice Exercises"]},{"cell_type":"markdown","metadata":{"id":"KByX5l8hGBmR"},"source":["Here are a few exercises to give you some more practice with these concepts. There is a solution key at the end of this notebook, but please don't look ahead until you have completed the exercises."]},{"cell_type":"markdown","metadata":{"id":"AHkxjqxmGBmR"},"source":["**Exercise one**"]},{"cell_type":"markdown","metadata":{"id":"wrSezVODGBmR"},"source":["For each of the code blocks below, write your prediction of what the output will be when you run the code. Then, try running each code cell to see if your prediction is correct.\n","\n","Remember that you can edit a markdown cell by double clicking in it."]},{"cell_type":"markdown","metadata":{"id":"9PVARl6UGBmR"},"source":["Example one: WRITE YOUR PREDICTION HERE"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"gYRvmAHjGBmR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054634728,"user_tz":240,"elapsed":7,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"1fe6a9c0-9ac9-4b4f-f0bd-957bc7c5f4ec"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":41}],"source":["2.0 == 4/2"]},{"cell_type":"markdown","metadata":{"id":"hROqyBZAGBmS"},"source":["Example two: WRITE YOUR PREDICTION HERE"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"ekxh1dN-GBmS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054635581,"user_tz":240,"elapsed":10,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"47224286-35df-43ad-e6a0-bd3cf281563d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":42}],"source":["3 == 27/9 and 4.0 == \"4.0\""]},{"cell_type":"markdown","metadata":{"id":"CDOPg_8QGBmS"},"source":["Example three: WRITE YOUR PREDICTION HERE"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"Rb2gcEa_GBmS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054637303,"user_tz":240,"elapsed":9,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"5a6cd466-4351-46cb-f523-854f1683bc92"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":43}],"source":["3 == 27/9 or 4 == \"4\""]},{"cell_type":"markdown","metadata":{"id":"H4mgb5FyGBmS"},"source":["**Exercise two**"]},{"cell_type":"markdown","metadata":{"id":"-U1lBYZBGBmS"},"source":["Initialize two variables, one called `hours_worked` with a value of 20 and another called `pay_rate` with a value of 18.5. Then, create a third variable called `weekly_pay` whose value is the outcome when you multiply the first two variables.\n","\n","Or, to put this another way, multiply `hours_worked` and `weekly_pay`, and then assign the output of that expression to the variable `weekly_pay`.\n","\n","Then, print `weekly_pay`."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SETeKyJBGBmT"},"outputs":[],"source":["# Fill in your code here\n"]},{"cell_type":"markdown","metadata":{"id":"J29hUd7uGBmT"},"source":["Now, modify your code to include conditional statements that account for two possible situations:\n","* If the `hours_worked` variable is over 40, multiply `weekly_pay` by `pay_rate` by 1.5 to get the `weekly_pay` variable with overtime.\n","* Otherwise keep the value of the `weekly_pay` variable as just the `hours_worked` multiplied by the `pay_rate`.\n","\n","Test your code with hours worked that are both above and below 40 (remember that you can overwrite a variable with a new value by rerunning its assignment statement). You can assume in your code that `hours_worked` and `pay_rate` will always be numeric variables."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UBQygdVKGBmT"},"outputs":[],"source":["# Fill in your code here\n"]},{"cell_type":"markdown","metadata":{"id":"waT21m12GBmT"},"source":["**Exercise three**\n","\n","Using your knowledge of `if` and `elif` conditional statements, write a generalized function that asks a user for their age, then prints out a response depending on whether they are old enough to drive. Don't worry about handling input other than integers—just assume that the user will provide a number. The solution below will assume that the driving age is 16."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nZem2FSOGBmT"},"outputs":[],"source":["#Fill in your code here"]},{"cell_type":"markdown","metadata":{"id":"cyFhbRO2GBmT"},"source":["# Solutions\n","\n","Here are some solutions for the exercises in this notebook. There are many different ways to approach coding, so you might have done something different. As long as the program runs correctly and you understand the concepts at stake, you're on the right track. You can make your code more efficient as you keep learning."]},{"cell_type":"markdown","metadata":{"id":"tGU2QElBGBmU"},"source":["**Exercise One**: Run the code to see if your predictions were correct."]},{"cell_type":"code","execution_count":44,"metadata":{"id":"6ktSPcmoGBmU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054640740,"user_tz":240,"elapsed":13,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"0102e4f0-c4c5-425b-9fa1-4d554ff8028f"},"outputs":[{"output_type":"stream","name":"stdout","text":["360\n"]}],"source":["# Exercise Two, Part one,\n","hours_worked = 20\n","pay_rate= 18\n","weekly_pay = hours_worked * pay_rate\n","print(weekly_pay)"]},{"cell_type":"markdown","source":["**Exercise 2**"],"metadata":{"id":"oLXglRGXazAF"}},{"cell_type":"code","source":["# Exercise Two\n","hours_worked = 41\n","pay_rate = 18\n","if hours_worked <= 40:\n","    weekly_pay = hours_worked * pay_rate\n","else:\n","    overtime_pay = (hours_worked-40) * pay_rate * 1.5\n","    regular_pay = 40 * pay_rate\n","    weekly_pay = regular_pay + overtime_pay\n","print(weekly_pay)"],"metadata":{"id":"k9pFigDJdRSL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054641728,"user_tz":240,"elapsed":6,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"86dd35bb-3125-4daa-af8a-7938b925bd11"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["747.0\n"]}]},{"cell_type":"markdown","source":["**Exercise Three**"],"metadata":{"id":"e54aUEgZa2Db"}},{"cell_type":"code","source":["#Exercise Three\n","#Write a generalized function that takes a users age as its input and prints\n","#out whether they are old enough to drive\n","\n","def test_user_age(age):\n","    if age >= 16:\n","        print(\"you are old enough to drive\")\n","    elif age < 16:\n","        print(\"you are not old enough to drive\")\n","\n","test_user_age(20)"],"metadata":{"id":"EIliQ_-_Zayg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761054643143,"user_tz":240,"elapsed":6,"user":{"displayName":"Sara Morrell","userId":"02120093354778565551"}},"outputId":"5682a47d-259a-46d0-9cee-2175590cdc1e"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["you are old enough to drive\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":true,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"colab":{"provenance":[{"file_id":"118gj8YBIAEJ77Pedcm2MGAo2MbpFess2","timestamp":1657644668900},{"file_id":"13NGZoQ-FKDdOKHf-3XiZg8sM1pirkZ0W","timestamp":1644960005283}],"toc_visible":true}},"nbformat":4,"nbformat_minor":0}